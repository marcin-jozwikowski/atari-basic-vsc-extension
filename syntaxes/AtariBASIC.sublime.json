{
    "name": "AtariBASIC",
    "file_extensions": [
      [
        "lst"
      ]
    ],
    "first_line_match": "\\d+ (\\?|BYE|C(OLOR|L(OSE|OAD|R)|OM|ONT|SAVE)|D(ATA|IM|OS|RAWTO)|EN(TER|D)|FOR|G(ET|O(SUB|TO)|RAPHICS)|IF|INPUT|L(ET|IST|OAD|OCATE|PRINT)|NE(W|XT)|NOTE|ON|OPEN|P(LOT|O(INT|KE|P|SITION)|RINT|UT)|RE(AD|M|STORE|TURN)|RUN|S(AVE|ETCOLOR|OUND|TATUS|TOP)|TRAP)([ :]|$)",
    "scope": "src.ataribasic",
    "variables": {
      "var": "[A-Z][A-Z0-9]*",
      "num": "\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?",
      "flt": "[-+]?({{num}})"
    },
    "contexts": {
      "cmd_next": [
        {
          "match": "{{var}}",
          "scope": "variable.float.ataribasic"
        }
      ],
      "cmd_dim_list": [
        {
          "include": "mixin_statement_end"
        },
        {
          "match": "\\,",
          "scope": "punctuation.definition.delimiter.list.ataribasic"
        },
        {
          "match": "{{var}}\\$",
          "scope": "variable.string.ataribasic"
        },
        {
          "match": "{{var}}",
          "scope": "variable.float.ataribasic"
        }
      ],
      "cmd_dim_subscript": [
        {
          "match": "\\(",
          "scope": "support.paren.open.dim.ataribasic",
          "push": "expr_paren_open"
        },
        {
          "match": "",
          "pop": true
        }
      ],
      "mixin_variable_name": [
        {
          "match": "{{var}}\\$",
          "scope": "variable.string.ataribasic",
          "push": "var_eat_subscript"
        },
        {
          "match": "{{var}}",
          "scope": "variable.float.ataribasic",
          "push": "var_eat_subscript"
        }
      ],
      "var_eat_subscript": [
        {
          "meta_scope": "ctx.var_eat_subscript.ataribasic"
        },
        {
          "match": "\\(",
          "scope": "support.paren.open.subscript.ataribasic",
          "push": "expr_paren_open"
        },
        {
          "match": "",
          "pop": true
        }
      ],
      
      "required_args": [
        {
          "match": "\\(",
          "scope": "support.paren.open.func.ataribasic",
          "set": "expr_paren_open"
        },
        {
          "match": "",
          "set": "syntax_error"
        }
      ],
      "expr_device": [
        {
          "match": "({{flt}})?",
          "scope": "constant.numeric.device-id.ataribasic",
          "set": "expr_start"
        }
      ],

      "expr_start": [
        {
          "meta_content_scope": "ctx.expr_start.ataribasic"
        },
        {
          "include": "mixin_statement_end"
        },
        {
          "include": "mixin_top_expr"
        }
      ],
      "expr_start_last": [
        {
          "meta_content_scope": "ctx.expr_start_last.ataribasic"
        },
        {
          "include": "mixin_top_expr"
        },
        {
          "match": ":",
          "scope": "support.token.delimiter.statement.ataribasic",
          "set": "dead_code"
        }
      ],
      "expr_paren_open": [
        {
          "meta_content_scope": "ctx.expr_paren_open.ataribasic"
        },
        {
          "include": "mixin_containers"
        },
        {
          "include": "mixin_values"
        },
        {
          "include": "mixin_operators"
        },
        {
          "match": "[^)]*(;:|$)",
          "set": "syntax_error"
        }
      ],
      "cmd_print_dev": [
        {
          "match": "({{flt}})?",
          "scope": "constant.numeric.device-id.ataribasic",
          "set": "cmd_print"
        }
      ],
      "cmd_print_old": [
        {
          "meta_content_scope": "ctx.cmd_print_old.ataribasic"
        },
        {
          "include": "mixin_statement_end"
        },
        {
          "match": "\\(",
          "scope": "support.paren.open.dim.ataribasic",
          "push": "expr_paren_open"
        },
        {
          "match": "\\)",
          "set": "syntax_error"
        },
        {
          "include": "mixin_string"
        },
        {
          "match": ";",
          "scope": "support.token.delimiter.concat.ataribasic"
        },
        {
          "include": "mixin_operators"
        },
        {
          "include": "mixin_values"
        }
      ],
      "cmd_print": [
        {
          "meta_content_scope": "ctx.cmd_print.ataribasic"
        },
        {
          "include": "mixin_statement_end"
        },
        {
          "match": ";",
          "scope": "support.token.delimiter.concat.ataribasic"
        },
        {
          "match": "\\,",
          "scope": "support.token.delimiter.tab.ataribasic"
        },
        {
          "include": "real_expr"
        }
      ],
      "quoted_string": [
        {
          "meta_scope": "string.quoted.ataribasic"
        },
        {
          "match": "[^\"]*$",
          "set": "syntax_error"
        },
        {
          "match": "\\\"",
          "scope": "punctuation.definition.string.close.ataribasic",
          "pop": true
        }
      ],
      "syntax_error": [
        {
          "meta_scope": "invalid.error.syntax.ataribasic"
        },
        {
          "match": "$",
          "pop": true
        }
      ],
      "line_should_end": [
        {
          "match": "$",
          "pop": true
        },
        {
          "match": "\\s*(:)\\s*(REM|(RE?)?\\.)",
          "captures": {
            "1": "support.token.delimiter.statement.ataribasic",
            "2": "keyword.rem.ataribasic"
          },
          "set": "cmd_rem"
        },
        {
          "match": "\\S.*",
          "set": "dead_code"
        }
      ],
      "statement_should_end": [
        {
          "match": ":",
          "pop": true
        },
        {
          "match": "",
          "set": "syntax_error"
        }
      ],
      "line_and_statement_should_end": [
        {
          "match": ":",
          "scope": "support.token.delimiter.statement.ataribasic",
          "set": "dead_code"
        },
        {
          "match": "",
          "set": "syntax_error"
        }
      ],
      "dead_code": [
        {
          "match": ":",
          "scope": "support.token.delimiter.statement.ataribasic"
        },
        {
          "match": "REM|(RE?)?\\.",
          "scope": "keyword.rem.ataribasic marked.dead",
          "set": "cmd_rem"
        },
        {
          "match": "",
          "set": "marked_dead"
        }
      ],
      "marked_dead": [
        {
          "meta_scope": "invalid.warning.dead-code.ataribasic"
        },
        {
          "include": "code_line"
        }
      ],
      "real_expr": [
        {
          "include": "mixin_statement_end"
        },
        {
          "match": "",
          "push": "expr_eat_modifier"
        }
      ],
      "expr_eat_modifier": [
        {
          "meta_content_scope": "ctx.expr_eat_modifier.ataribasic"
        },
        {
          "match": "{{flt}}",
          "scope": "constant.numeric.float.ataribasic",
          "set": "expr_wants_operator"
        },
        {
          "match": "(NOT)|(-)|(\\+)",
          "captures": {
            "1": "keyword.operator.logic.ataribasic",
            "2": "keyword.operator.negative.ataribasic",
            "3": "keyword.operator.positive.ataribasic"
          },
          "set": "expr_2nd_modifier"
        },
        {
          "match": "",
          "set": "expr_wants_value"
        }
      ],
      "expr_2nd_modifier": [
        {
          "meta_content_scope": "ctx.expr_2nd_modifier.ataribasic"
        },
        {
          "match": "{{flt}}",
          "scope": "constant.numeric.float.ataribasic",
          "set": "expr_wants_operator"
        },
        {
          "match": "NOT|[-+]",
          "set": "syntax_error"
        },
        {
          "match": "",
          "set": "expr_wants_value"
        }
      ],
      "expr_wants_value": [
        {
          "meta_content_scope": "ctx.expr_wants_value.ataribasic"
        },
        {
          "match": "CHR\\$",
          "scope": "meta.function-call.chrS.ataribasic",
          "set": [
            "expr_wants_operator",
            "required_args"
          ]
        },
        {
          "match": "STR\\$",
          "scope": "meta.function-call.str.ataribasic",
          "set": [
            "expr_wants_operator",
            "required_args"
          ]
        },
        {
          "match": "(FRE)|(USR)|(ABS)|(ADR)|(ASC)|(ATN)|(CLOG)|(COS)|(EXP)|(INT)|(LEN)|(LOG)|(PEEK)|(RND)|(SGN)|(SIN)|(SQR)|(VAL)|(PADDLE)|(PTRIG)|(STICK)|(STRIG)",
          "captures": {
            "1": "meta.function-call.fre.ataribasic",
            "2": "meta.function-call.usr.ataribasic",
            "3": "meta.function-call.abs.ataribasic",
            "4": "meta.function-call.adr.ataribasic",
            "5": "meta.function-call.asc.ataribasic",
            "6": "meta.function-call.atn.ataribasic",
            "7": "meta.function-call.clog.ataribasic",
            "8": "meta.function-call.cos.ataribasic",
            "9": "meta.function-call.exp.ataribasic",
            "10": "meta.function-call.int.ataribasic",
            "11": "meta.function-call.len.ataribasic",
            "12": "meta.function-call.log.ataribasic",
            "13": "meta.function-call.peek.ataribasic",
            "14": "meta.function-call.rnd.ataribasic",
            "15": "meta.function-call.sgn.ataribasic",
            "16": "meta.function-call.sin.ataribasic",
            "17": "meta.function-call.sqr.ataribasic",
            "18": "meta.function-call.val.ataribasic",
            "19": "meta.function-call.paddle.ataribasic",
            "20": "meta.function-call.ptrig.ataribasic",
            "21": "meta.function-call.stick.ataribasic",
            "22": "meta.function-call.strig.ataribasic"
          },
          "set": [
            "expr_wants_operator",
            "required_args"
          ]
        },
        {
          "match": "\\(",
          "scope": "support.paren.open.ataribasic",
          "set": "expr_till_close"
        },
        {
          "match": "\\\"",
          "scope": "punctuation.definition.string.open.ataribasic",
          "set": "expr_eat_string"
        },
        {
          "match": "{{flt}}",
          "scope": "variable.float.ataribasic",
          "set": "expr_wants_operator"
        },
        {
          "match": "THEN|GOTO|GOSUB",
          "scope": "invalid.error.reserved-word.ataribasic",
          "set": "syntax_error"
        },
        {
          "match": "{{var}}\\$",
          "scope": "variable.string.ataribasic",
          "set": "expr_eat_subscript"
        },
        {
          "match": "{{var}}",
          "scope": "variable.float.ataribasic",
          "set": "expr_eat_subscript"
        },
        {
          "match": "",
          "set": "syntax_error"
        }
      ],
      "expr_wants_operator": [
        {
          "meta_content_scope": "ctx.expr_wants_operator.ataribasic"
        },
        {
          "match": "((<>|[<>]=|[-+*/^<=>]|AND|OR)\\s*(:|$))",
          "set": "syntax_error"
        },
        {
          "match": "[-+*/^]",
          "scope": "keyword.operator.math.ataribasic",
          "set": "expr_eat_modifier"
        },
        {
          "match": "<>|[<>]=?|=|AND|OR",
          "scope": "keyword.operator.logic.ataribasic",
          "set": "expr_eat_modifier"
        },
        {
          "match": "(THEN)\\s*({{flt}})",
          "captures": {
            "1": "keyword.then.ataribasic",
            "2": "constant.numeric.line-number.ataribasic"
          },
          "set": "line_and_statement_should_end"
        },
        {
          "match": "THEN",
          "scope": "keyword.then.ataribasic",
          "set": "code_line"
        },
        {
          "match": "(GOTO)|(GOSUB)",
          "captures": {
            "1": "keyword.goto.ataribasic",
            "2": "keyword.gosub.ataribasic"
          },
          "pop": true
        },
        {
          "match": "({{var}})|({{flt}})|\\(",
          "set": "syntax_error"
        },
        {
          "match": "",
          "pop": true
        }
      ],
      "expr_wants_comparison": [
        {
          "meta_content_scope": "ctx.expr_wants_comparison.ataribasic"
        },
        {
          "match": "(<>|[<>]=?|=)\\s*(:|$)",
          "set": "syntax_error"
        },
        {
          "match": "<>|[<>]=?|=",
          "scope": "keyword.operator.logic.ataribasic",
          "set": "expr_eat_modifier"
        },
        {
          "match": "(THEN)\\s*({{flt}})",
          "captures": {
            "1": "keyword.then.ataribasic",
            "2": "constant.numeric.line-number.ataribasic"
          },
          "set": "line_and_statement_should_end"
        },
        {
          "match": "THEN",
          "scope": "keyword.then.ataribasic",
          "set": "code_line"
        },
        {
          "match": "(GOTO)|(GOSUB)",
          "captures": {
            "1": "keyword.goto.ataribasic",
            "2": "keyword.gosub.ataribasic"
          },
          "pop": true
        },
        {
          "match": "({{var}})|({{flt}})|\\(",
          "set": "syntax_error"
        },
        {
          "match": "",
          "pop": true
        }
      ],
      "expr_eat_subscript": [
        {
          "meta_content_scope": "ctx.expr_eat_subscript.ataribasic"
        },
        {
          "match": "\\s*(\\()",
          "captures": {
            "1": "support.paren.open.subscript.ataribasic"
          },
          "set": "expr_till_close"
        },
        {
          "match": "",
          "set": "expr_wants_operator"
        }
      ],
      "expr_eat_string": [
        {
          "meta_scope": "string.quoted.ataribasic"
        },
        {
          "match": "$",
          "pop": true
        },
        {
          "match": "[^\"]*(\")",
          "captures": {
            "1": "punctuation.definition.string.close.ataribasic"
          },
          "set": "expr_wants_operator"
        },
        {
          "match": "",
          "set": "syntax_error"
        }
      ],
      "expr_till_close": [
        {
          "meta_content_scope": "ctx.expr_till_close.ataribasic"
        },
        {
          "match": "[^)]*(;:|$)",
          "set": "syntax_error"
        },
        {
          "include": "mixin_statement_end"
        },
        {
          "match": "\\)",
          "scope": "support.paren.close.subscript.ataribasic",
          "set": "expr_wants_operator"
        },
        {
          "match": "\\,",
          "scope": "support.token.delimiter.subscripts.ataribasic"
        },
        {
          "match": "",
          "push": "expr_eat_modifier"
        }
      ],
      "expr_wants_float": [
        {
          "meta_content_scope": "ctx.expr_wants_float.ataribasic"
        },
        {
          "match": "{{var}}\\$",
          "set": "syntax_error"
        },
        {
          "match": "{{var}}",
          "scope": "variable.float.ataribasic",
          "set": "expr_eat_subscript"
        },
        {
          "match": "{{flt}}",
          "scope": "constant.numeric.float.ataribasic",
          "set": "expr_wants_operator"
        },
        {
          "match": "",
          "set": "syntax_error"
        }
      ],
      "expr_wants_string": [
        {
          "match": "{{var}}\\$",
          "scope": "variable.string.ataribasic",
          "set": "expr_wants_operator"
        },
        {
          "include": "mixin_string"
        },
        {
          "match": "",
          "set": "syntax_error"
        }
      ],
      "mixin_containers": [
        {
          "include": "mixin_string"
        },
        {
          "match": "\\(",
          "scope": "support.paren.open.expr.ataribasic",
          "push": "expr_paren_open"
        },
        {
          "match": "\\)",
          "scope": "support.paren.close.ataribasic",
          "pop": true
        }
      ],
      "one_expr": [
        {
          "match": "\\s*([,;:]|$)",
          "set": "syntax_error"
        },
        {
          "match": "",
          "set": "real_expr"
        }
      ],
      "two_exprs": [
        {
          "meta_content_scope": "ctx.two_exprs.ataribasic"
        },
        {
          "match": "\\s*:|$",
          "set": "syntax_error"
        },
        {
          "match": "\\s*(,)",
          "captures": {
            "1": "support.token.delimiter.list.1.ataribasic"
          },
          "set": "one_expr"
        },
        {
          "include": "real_expr"
        }
      ],
      "three_exprs": [
        {
          "meta_content_scope": "ctx.three_exprs.ataribasic"
        },
        {
          "match": "\\s*:|$",
          "set": "syntax_error"
        },
        {
          "match": "\\s*(,)",
          "captures": {
            "1": "support.token.delimiter.list.2.ataribasic"
          },
          "set": "two_exprs"
        },
        {
          "include": "real_expr"
        }
      ],
      "four_exprs": [
        {
          "meta_content_scope": "ctx.four_exprs.ataribasic"
        },
        {
          "match": "\\s*:|$",
          "set": "syntax_error"
        },
        {
          "match": "\\s*(,)",
          "captures": {
            "1": "support.token.delimiter.list.3.ataribasic"
          },
          "set": "three_exprs"
        },
        {
          "include": "real_expr"
        }
      ],
     
    }
  }