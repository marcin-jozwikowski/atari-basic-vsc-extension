{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Atari BASIC",
  "scopeName": "source.atari.basic",
  "information_for_contributors": [
    "This file is a modified version of https://github.com/thinkyhead/6502-Tools/blob/master/Sublime/AtariTools/AtariBASIC.sublime-syntax"
  ],
  "first_line_match": "\\d+ (\\?|BYE|C(OLOR|L(OSE|OAD|R)|OM|ONT|SAVE)|D(ATA|IM|OS|RAWTO)|EN(TER|D)|FOR|G(ET|O(SUB|TO)|RAPHICS)|IF|INPUT|L(ET|IST|OAD|OCATE|PRINT)|NE(W|XT)|NOTE|ON|OPEN|P(LOT|O(INT|KE|P|SITION)|RINT|UT)|RE(AD|M|STORE|TURN)|RUN|S(AVE|ETCOLOR|OUND|TATUS|TOP)|TRAP)([ :]|$)",
  "patterns": [
    {
      "include": "#prototype"
    },
    {
      "include": "#main"
    },
    {
      "include": "#code_line"
    },
    {
      "include": "#cmd_xio"
    },
    {
      "include": "#cmd_xio_part2"
    },
    {
      "include": "#cmd_on"
    },
    {
      "include": "#cmd_on_expr"
    },
    {
      "include": "#on_line_list"
    },
    {
      "include": "#cmd_rem"
    },
    {
      "include": "#cmd_data"
    },
    {
      "include": "#cmd_done"
    },
    {
      "include": "#cmd_let"
    },
    {
      "include": "#cmd_let_equals"
    },
    {
      "include": "#cmd_if"
    },
    {
      "include": "#cmd_for"
    },
    {
      "include": "#cmd_next"
    },
    {
      "include": "#cmd_dim_list"
    },
    {
      "include": "#cmd_dim_subscript"
    },
    {
      "include": "#mixin_variable_name"
    },
    {
      "include": "#var_eat_subscript"
    },
    {
      "include": "#mixin_values"
    },
    {
      "include": "#required_args"
    },
    {
      "include": "#mixin_operators"
    },
    {
      "include": "#expr_device"
    },
    {
      "include": "#mixin_top_expr"
    },
    {
      "include": "#expr_start"
    },
    {
      "include": "#expr_start_last"
    },
    {
      "include": "#expr_paren_open"
    },
    {
      "include": "#cmd_print_dev"
    },
    {
      "include": "#mixin_string"
    },
    {
      "include": "#cmd_print_old"
    },
    {
      "include": "#cmd_print"
    },
    {
      "include": "#quoted_string"
    },
    {
      "include": "#syntax_error"
    },
    {
      "include": "#line_should_end"
    },
    {
      "include": "#statement_should_end"
    },
    {
      "include": "#line_and_statement_should_end"
    },
    {
      "include": "#dead_code"
    },
    {
      "include": "#marked_dead"
    },
    {
      "include": "#real_expr"
    },
    {
      "include": "#expr_eat_modifier"
    },
    {
      "include": "#expr_2nd_modifier"
    },
    {
      "include": "#expr_wants_value"
    },
    {
      "include": "#expr_wants_operator"
    },
    {
      "include": "#expr_wants_comparison"
    },
    {
      "include": "#expr_eat_subscript"
    },
    {
      "include": "#expr_eat_string"
    },
    {
      "include": "#expr_till_close"
    },
    {
      "include": "#expr_wants_float"
    },
    {
      "include": "#expr_wants_string"
    },
    {
      "include": "#mixin_containers"
    },
    {
      "include": "#mixin_some_exprs"
    },
    {
      "include": "#one_expr"
    },
    {
      "include": "#two_exprs"
    },
    {
      "include": "#three_exprs"
    },
    {
      "include": "#four_exprs"
    },
    {
      "include": "#mixin_statement_end"
    }
  ],
  "repository": {
    "prototype": {
      "patterns": [
        {
          "match": "\\s+"
        },
        {
          "match": "$"
        }
      ]
    },
    "main": {
      "patterns": [
        {
          "meta_include_prototype": false
        },
        {
          "meta_content_scope": "ctx.main.atari.basic"
        },
        {
          "match": "$"
        },
        {
          "match": "^(.{254})(\\S.+?)\\s*$",
          "captures": {
            "1": {
              "name": "invalid.warning.line-too-long.atari.basic"
            },
            "2": {
              "name": "invalid.error.line-too-long.atari.basic"
            }
          }
        },
        {
          "match": "\\s+"
        },
        {
          "match": "([-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?))\\s*ERROR\\s*-.*",
          "name": "invalid.error.line.atari.basic",
          "push": "syntax_error"
        },
        {
          "match": "^(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?)",
          "name": "constant.numeric.line-number.atari.basic",
          "push": "code_line"
        },
        {
          "match": "",
          "push": "code_line"
        },
        {
          "match": "\"(.*)\"",
          "name": "string.quoted.double"
        }
      ]
    },
    "code_line": {
      "patterns": [
        {
          "meta_content_scope": "ctx.code_line.atari.basic"
        },
        {
          "match": "((REM|(RE?)?\\.)([\\s\\S]*))",
          "name": "keyword.rem.atari.basic",
          "captures": {
            "2": {
              "name": "comment.line"
            },
            "4": {
              "name": "comment.line"
            }
          }
        },
        {
          "match": "(D(ATA|(AT?)?\\.))\\s*",
          "captures": {
            "1": {
              "name": "keyword.data.atari.basic"
            }
          },
          "push": "cmd_data"
        },
        {
          "match": "RES(TORE|(T(O(RE?)?)?)?\\.)",
          "name": "keyword.restore.atari.basic",
          "push": "expr_start"
        },
        {
          "match": "(CLR)|(CON[T.])|(DEG)|(POP)|(RAD)|(CLOAD)|(CS(AVE|(AV?)?\\.))",
          "captures": {
            "1": {
              "name": "keyword.clr.atari.basic"
            },
            "2": {
              "name": "keyword.cont.atari.basic"
            },
            "3": {
              "name": "keyword.deg.atari.basic"
            },
            "4": {
              "name": "keyword.pop.atari.basic"
            },
            "5": {
              "name": "keyword.rad.atari.basic"
            },
            "6": {
              "name": "keyword.cload.atari.basic"
            },
            "7": {
              "name": "keyword.csave.atari.basic"
            }
          },
          "push": "cmd_done"
        },
        {
          "match": "(B(YE|Y?\\.))|(DOS)|(END)|(NEW)|(STO[P.])|(RET(URN|(UR?)?\\.))",
          "captures": {
            "1": {
              "name": "keyword.bye.atari.basic"
            },
            "3": {
              "name": "keyword.dos.atari.basic"
            },
            "4": {
              "name": "keyword.end.atari.basic"
            },
            "5": {
              "name": "keyword.new.atari.basic"
            },
            "6": {
              "name": "keyword.stop.atari.basic"
            },
            "7": {
              "name": "keyword.return.atari.basic"
            }
          },
          "push": "line_and_statement_should_end"
        },
        {
          "match": "RU[N.]",
          "name": "keyword.run.atari.basic",
          "push": "expr_start_last"
        },
        {
          "match": "(\\?|PR(INT|(IN?)?.))\\s*(#)",
          "captures": {
            "1": {
              "name": "keyword.print.atari.basic"
            },
            "4": {
              "name": "support.token.iocb.atari.basic"
            }
          },
          "push": "cmd_print_dev"
        },
        {
          "match": "\\?|PR(INT|(IN?)?\\.)",
          "name": "keyword.print.atari.basic",
          "push": "cmd_print"
        },
        {
          "match": "LP(RINT|(R(IN?)?)?\\.)",
          "name": "keyword.lprint.atari.basic",
          "push": "cmd_print"
        },
        {
          "match": "(I(NPUT|(N(PU?)?)?\\.))\\s*(#)",
          "captures": {
            "1": {
              "name": "keyword.input.atari.basic"
            },
            "5": {
              "name": "support.token.iocb.atari.basic"
            }
          },
          "push": "expr_device"
        },
        {
          "match": "I(NPUT|(N(PU?)?)?\\.)",
          "name": "keyword.input.atari.basic",
          "push": "expr_start"
        },
        {
          "match": "(CL(OSE|(OS?)?\\.))\\s*(#)",
          "captures": {
            "1": {
              "name": "keyword.close.atari.basic"
            },
            "4": {
              "name": "support.token.iocb.atari.basic"
            }
          },
          "push": "expr_device"
        },
        {
          "match": "(O(PEN|(PE?)?\\.))\\s*(#)",
          "captures": {
            "1": {
              "name": "keyword.open.atari.basic"
            },
            "4": {
              "name": "support.token.iocb.atari.basic"
            }
          },
          "push": "expr_device"
        },
        {
          "match": "((GET)|(NO(TE|T?\\.))|(ST(ATUS|(A(TU?)?)?\\.)))\\s*(#)",
          "captures": {
            "2": {
              "name": "keyword.get.atari.basic"
            },
            "3": {
              "name": "keyword.note.atari.basic"
            },
            "5": {
              "name": "keyword.status.atari.basic"
            },
            "9": {
              "name": "support.token.iocb.atari.basic"
            }
          },
          "push": "expr_device"
        },
        {
          "match": "XIO\\b",
          "name": "keyword.xio.atari.basic",
          "push": "cmd_xio"
        },
        {
          "match": "(PUT)\\s*(#)",
          "captures": {
            "1": {
              "name": "keyword.get.atari.basic"
            },
            "2": {
              "name": "support.token.iocb.atari.basic"
            }
          },
          "push": "expr_device"
        },
        {
          "match": "(P(OINT|(O(IN?)?)?\\.))\\s*(#)",
          "captures": {
            "1": {
              "name": "keyword.get.atari.basic"
            },
            "5": {
              "name": "support.token.iocb.atari.basic"
            }
          },
          "push": "expr_device"
        },
        {
          "match": "DIM|COM",
          "name": "keyword.dim.atari.basic",
          "push": "cmd_dim_list"
        },
        {
          "match": "F(OR|O?\\.)",
          "name": "keyword.for.atari.basic",
          "push": "cmd_for"
        },
        {
          "match": "N(EXT|(EX?)?\\.)",
          "name": "keyword.next.atari.basic",
          "push": "cmd_next"
        },
        {
          "match": "T(RAP|(RA?)?\\.)",
          "name": "keyword.trap.atari.basic",
          "push": "one_expr"
        },
        {
          "match": "POK[E.]",
          "name": "keyword.poke.atari.basic",
          "push": "two_exprs"
        },
        {
          "match": "C(OLOR|(O(LO?)?)?\\.)",
          "name": "keyword.color.atari.basic",
          "push": "one_expr"
        },
        {
          "match": "DR(AWTO|(A(WT?)?)?\\.)",
          "name": "keyword.drawto.atari.basic",
          "push": "two_exprs"
        },
        {
          "match": "GR(APHICS|(A(P(H(IC?)?)?)?)?\\.)",
          "name": "keyword.graphics.atari.basic",
          "push": "one_expr"
        },
        {
          "match": "LOC(ATE|(AT?)?\\.)",
          "name": "keyword.locate.atari.basic",
          "push": "three_exprs"
        },
        {
          "match": "POS(ITION|(I(T(IO?)?)?)?\\.)",
          "name": "keyword.position.atari.basic",
          "push": "two_exprs"
        },
        {
          "match": "PL(OT|O?\\.)",
          "name": "keyword.plot.atari.basic",
          "push": "two_exprs"
        },
        {
          "match": "SE(TCOLOR|(T(C(O(LO?)?)?)?)?\\.)",
          "name": "keyword.setcolor.atari.basic",
          "push": "three_exprs"
        },
        {
          "match": "SO(UND|(UN?)?\\.)",
          "name": "keyword.sound.atari.basic",
          "push": "four_exprs"
        },
        {
          "match": "REA[D.]",
          "name": "keyword.read.atari.basic",
          "push": "expr_start"
        },
        {
          "match": "THREE",
          "name": "keyword.three.atari.basic",
          "push": "three_exprs"
        },
        {
          "match": "L(IST|(IS?)?\\.)",
          "name": "keyword.list.atari.basic",
          "push": "expr_start"
        },
        {
          "match": "(LO(AD|A?\\.))|(S(AVE|(AV?)?\\.))|(E(NTER|(N(TE?)?)?\\.))",
          "captures": {
            "1": {
              "name": "keyword.load.atari.basic"
            },
            "3": {
              "name": "keyword.save.atari.basic"
            },
            "6": {
              "name": "keyword.enter.atari.basic"
            }
          },
          "push": "one_expr"
        },
        {
          "match": "G(OTO|(OT?)?\\.)",
          "name": "keyword.goto.atari.basic",
          "push": "expr_start_last"
        },
        {
          "match": "GOS(UB|U?\\.)",
          "name": "keyword.gosub.atari.basic",
          "push": "one_expr"
        },
        {
          "match": "ON",
          "name": "keyword.on.atari.basic",
          "push": "cmd_on"
        },
        {
          "match": "IF",
          "name": "keyword.if.atari.basic",
          "push": "cmd_if"
        },
        {
          "match": "THEN",
          "name": "keyword.then.atari.basic",
          "push": "cmd_then"
        },
        {
          "match": "(LET)\\s*([A-Z][A-Z0-9]*\\$)",
          "captures": {
            "1": {
              "name": "keyword.let.atari.basic"
            },
            "2": {
              "name": "variable.string.let.atari.basic"
            }
          },
          "push": "cmd_let"
        },
        {
          "match": "(VAR)\\s*([A-Z][A-Z0-9]*)",
          "captures": {
            "1": {
              "name": "keyword.var.atari.basic"
            },
            "2": {
              "name": "variable.string.var.atari.basic"
            }
          },
          "push": "cmd_var"
        }
      ]
    },
    "cmd_xio": {
      "patterns": [
        {
          "match": "\\,",
          "name": "support.token.delimiter.list.1.atari.basic",
          "set": "cmd_xio_part2"
        },
        {
          "include": "#real_expr"
        }
      ]
    },
    "cmd_xio_part2": {
      "patterns": [
        {
          "match": "\\s*(\\#[0-9{1,2}])",
          "captures": {
            "1": {
              "name": "support.token.iocb.atari.basic"
            }
          },
          "set": "expr_device"
        }
      ]
    },
    "cmd_on": {
      "patterns": [
        {
          "meta_scope": "ctx.cmd_on.atari.basic"
        },
        {
          "match": "\\s*(:|$|(GOTO|GOSUB)\\b)",
          "name": "invalid.illegal"
        }
      ]
    },
    "cmd_on_expr": {
      "patterns": [
        {
          "match": "GOTO",
          "name": "keyword.on-goto.atari.basic",
          "set": "on_line_list"
        },
        {
          "match": "GOSUB",
          "name": "keyword.on-gosub.atari.basic",
          "set": "on_line_list"
        },
        {
          "include": "#mixin_some_exprs"
        }
      ]
    },
    "on_line_list": {
      "patterns": [
        {
          "include": "#mixin_statement_end"
        },
        {
          "match": "(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?|[A-Z][A-Z0-9]*)\\s*(\\,)?",
          "captures": {
            "1": {
              "name": "constant.numeric.line-number.atari.basic"
            },
            "2": {
              "name": "support.token.delimiter.list.atari.basic"
            }
          }
        },
        {
          "match": "[^\\d]",
          "name": "invalid.illegal"
        }
      ]
    },
    "cmd_rem": {
      "patterns": [
        {
          "match": "(REM)([\\w ]*)",
          "captures": {
            "1": {
              "name": "comment.atari.basic"
            },
            "2": {
              "name": "comment.atari.basic"
            }
          }
        }
      ]
    },
    "cmd_data": {
      "patterns": [
        {
          "match": "$"
        },
        {
          "match": "([^,]+?)(\\s*$)?",
          "name": "entity.literal.string.data.atari.basic"
        },
        {
          "match": "\\,",
          "name": "support.token.delimiter.data.atari.basic"
        }
      ]
    },
    "cmd_done": {
      "patterns": [
        {
          "include": "#mixin_statement_end"
        }
      ]
    },
    "cmd_let": {
      "patterns": [
        {
          "meta_scope": "ctx.cmd_let.atari.basic"
        },
        {
          "match": "\\(",
          "name": "support.paren.open.subscript.atari.basic",
          "push": "expr_paren_open"
        }
      ]
    },
    "cmd_let_equals": {
      "patterns": [
        {
          "meta_content_scope": "ctx.cmd_let_equals.atari.basic"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.atari.basic",
          "set": "one_expr"
        }
      ]
    },
    "cmd_if": {
      "patterns": [
        {
          "meta_content_scope": "ctx.cmd_if.atari.basic"
        },
        {
          "match": "\\s*:|$",
          "name": "invalid.illegal"
        },
        {
          "include": "#real_expr"
        },
        {
          "match": "\\s*([-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?))",
          "captures": {
            "1": {
              "name": "constant.numeric.line-number.atari.basic"
            }
          },
          "set": "line_and_statement_should_end"
        },
        {
          "match": ".",
          "name": "support.test.atari.basic"
        }
      ]
    },
    "cmd_for": {
      "patterns": [
        {
          "include": "#mixin_statement_end"
        },
        {
          "match": "TO",
          "name": "keyword.to.atari.basic"
        },
        {
          "match": "STEP",
          "name": "keyword.step.atari.basic"
        },
        {
          "include": "#expr_start"
        }
      ]
    },
    "cmd_next": {
      "patterns": [
        {
          "match": "[A-Z][A-Z0-9]*",
          "name": "variable.float.cmdnext.atari.basic",
          "set": "cmd_done"
        },
        {
          "match": ""
        }
      ]
    },
    "cmd_dim_list": {
      "patterns": [
        {
          "meta_content_scope": "ctx.cmd_dim_list.atari.basic"
        },
        {
          "include": "#mixin_statement_end"
        },
        {
          "match": "\\,",
          "name": "punctuation.definition.delimiter.list.atari.basic"
        },
        {
          "match": "[A-Z][A-Z0-9]*\\$",
          "name": "variable.string.dim.atari.basic",
          "push": "cmd_dim_subscript"
        },
        {
          "match": "[A-Z][A-Z0-9]*",
          "name": "variable.float.cmddimlist.atari.basic",
          "push": "cmd_dim_subscript"
        }
      ]
    },
    "cmd_dim_subscript": {
      "patterns": [
        {
          "match": "\\(",
          "name": "support.paren.open.dim.atari.basic",
          "push": "expr_paren_open"
        },
        {
          "match": ""
        }
      ]
    },
    "mixin_variable_name": {
      "patterns": [
        {
          "match": "[A-Z][A-Z0-9]*\\$",
          "name": "variable.string.varname.atari.basic",
          "push": "var_eat_subscript"
        },
        {
          "match": "[A-Z][A-Z0-9]*",
          "name": "variable.float.mixinvarname.atari.basic",
          "push": "var_eat_subscript"
        }
      ]
    },
    "var_eat_subscript": {
      "patterns": [
        {
          "meta_scope": "ctx.var_eat_subscript.atari.basic"
        },
        {
          "match": "\\(",
          "name": "support.paren.open.subscript.atari.basic",
          "push": "expr_paren_open"
        },
        {
          "match": ""
        }
      ]
    },
    "mixin_values": {
      "patterns": [
        {
          "match": "[a-z\\$\\%]",
          "name": "invalid.illegal"
        },
        {
          "match": "CHR\\$",
          "name": "meta.function-call.chrS.atari.basic",
          "push": "required_args"
        },
        {
          "match": "STR\\$",
          "name": "meta.function-call.str.atari.basic",
          "push": "required_args"
        },
        {
          "match": "(FRE)|(USR)|(ABS)|(ADR)|(ASC)|(ATN)|(CLOG)|(COS)|(EXP)|(INT)|(LEN)|(LOG)|(PEEK)|(RND)|(SGN)|(SIN)|(SQR)|(VAL)|(PADDLE)|(PTRIG)|(STICK)|(STRIG)",
          "captures": {
            "1": {
              "name": "meta.function-call.fre.atari.basic"
            },
            "2": {
              "name": "meta.function-call.usr.atari.basic"
            },
            "3": {
              "name": "meta.function-call.abs.atari.basic"
            },
            "4": {
              "name": "meta.function-call.adr.atari.basic"
            },
            "5": {
              "name": "meta.function-call.asc.atari.basic"
            },
            "6": {
              "name": "meta.function-call.atn.atari.basic"
            },
            "7": {
              "name": "meta.function-call.clog.atari.basic"
            },
            "8": {
              "name": "meta.function-call.cos.atari.basic"
            },
            "9": {
              "name": "meta.function-call.exp.atari.basic"
            },
            "10": {
              "name": "meta.function-call.int.atari.basic"
            },
            "11": {
              "name": "meta.function-call.len.atari.basic"
            },
            "12": {
              "name": "meta.function-call.log.atari.basic"
            },
            "13": {
              "name": "meta.function-call.peek.atari.basic"
            },
            "14": {
              "name": "meta.function-call.rnd.atari.basic"
            },
            "15": {
              "name": "meta.function-call.sgn.atari.basic"
            },
            "16": {
              "name": "meta.function-call.sin.atari.basic"
            },
            "17": {
              "name": "meta.function-call.sqr.atari.basic"
            },
            "18": {
              "name": "meta.function-call.val.atari.basic"
            },
            "19": {
              "name": "meta.function-call.paddle.atari.basic"
            },
            "20": {
              "name": "meta.function-call.ptrig.atari.basic"
            },
            "21": {
              "name": "meta.function-call.stick.atari.basic"
            },
            "22": {
              "name": "meta.function-call.strig.atari.basic"
            }
          },
          "push": "required_args"
        },
        {
          "match": "[-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?)",
          "name": "constant.numeric.float.atari.basic"
        },
        {
          "include": "#mixin_variable_name"
        }
      ]
    },
    "required_args": {
      "patterns": [
        {
          "match": "\\(",
          "name": "support.paren.open.func.atari.basic",
          "set": "expr_paren_open"
        }
      ]
    },
    "mixin_operators": {
      "patterns": [
        {
          "match": "\\,",
          "name": "support.token.delimiter.list.atari.basic"
        },
        {
          "match": "([-+*/^])",
          "name": "keyword.operator.math.atari.basic"
        },
        {
          "match": "(<>|[<>]=?|=|AND|NOT|OR)",
          "name": "keyword.operator.logic.mixin.operators.atari.basic"
        }
      ]
    },
    "expr_device": {
      "patterns": [
        {
          "match": "([-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?))?",
          "name": "constant.numeric.device-id.atari.basic",
          "set": "expr_start"
        }
      ]
    },
    "mixin_top_expr": {
      "patterns": [
        {
          "include": "#mixin_string"
        },
        {
          "match": "\\(",
          "name": "support.paren.open.expr.atari.basic",
          "push": "expr_paren_open"
        },
        {
          "match": "\\)",
          "name": "invalid.illegal"
        },
        {
          "include": "#mixin_operators"
        },
        {
          "include": "#mixin_values"
        }
      ]
    },
    "expr_start": {
      "patterns": [
        {
          "meta_content_scope": "ctx.expr_start.atari.basic"
        },
        {
          "include": "#mixin_statement_end"
        },
        {
          "include": "#mixin_top_expr"
        }
      ]
    },
    "expr_start_last": {
      "patterns": [
        {
          "meta_content_scope": "ctx.expr_start_last.atari.basic"
        },
        {
          "include": "#mixin_top_expr"
        },
        {
          "match": ":",
          "name": "support.token.delimiter.statement.atari.basic",
          "set": "dead_code"
        }
      ]
    },
    "expr_paren_open": {
      "patterns": [
        {
          "meta_content_scope": "ctx.expr_paren_open.atari.basic"
        },
        {
          "include": "#mixin_containers"
        },
        {
          "include": "#mixin_values"
        },
        {
          "include": "#mixin_operators"
        },
        {
          "match": "[^)]*(;:|$)",
          "name": "invalid.illegal"
        }
      ]
    },
    "cmd_print_dev": {
      "patterns": [
        {
          "match": "([-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?))?",
          "name": "constant.numeric.device-id.atari.basic",
          "set": "cmd_print"
        }
      ]
    },
    "mixin_string": {
      "patterns": [
        {
          "match": "\\\"",
          "name": "punctuation.definition.string.open.atari.basic",
          "push": "quoted_string"
        }
      ]
    },
    "cmd_print_old": {
      "patterns": [
        {
          "meta_content_scope": "ctx.cmd_print_old.atari.basic"
        },
        {
          "include": "#mixin_statement_end"
        },
        {
          "match": "\\(",
          "name": "support.paren.open.dim.atari.basic",
          "push": "expr_paren_open"
        },
        {
          "match": "\\)",
          "name": "invalid.illegal"
        },
        {
          "include": "#mixin_string"
        },
        {
          "match": ";",
          "name": "support.token.delimiter.concat.atari.basic"
        },
        {
          "include": "#mixin_operators"
        },
        {
          "include": "#mixin_values"
        }
      ]
    },
    "cmd_print": {
      "patterns": [
        {
          "meta_content_scope": "ctx.cmd_print.atari.basic"
        },
        {
          "include": "#mixin_statement_end"
        },
        {
          "match": ";",
          "name": "support.token.delimiter.concat.atari.basic"
        },
        {
          "match": "\\,",
          "name": "support.token.delimiter.tab.atari.basic"
        },
        {
          "include": "#real_expr"
        }
      ]
    },
    "quoted_string": {
      "patterns": [
        {
          "meta_scope": "string.quoted.atari.basic"
        },
        {
          "match": "[^\"]*$",
          "name": "invalid.illegal"
        },
        {
          "match": "\\\"",
          "name": "punctuation.definition.string.close.atari.basic"
        }
      ]
    },
    "syntax_error": {
      "patterns": [
        {
          "meta_scope": "invalid.error.syntax.atari.basic"
        },
        {
          "match": "$"
        }
      ]
    },
    "line_should_end": {
      "patterns": [
        {
          "match": "$"
        },
        {
          "match": "\\s*(:)\\s*(REM|(RE?)?\\.)",
          "captures": {
            "1": {
              "name": "support.token.delimiter.statement.atari.basic"
            },
            "2": {
              "name": "keyword.rem.shouldend.atari.basic"
            }
          },
          "set": "cmd_rem"
        },
        {
          "match": "\\S.*",
          "set": "dead_code"
        }
      ]
    },
    "statement_should_end": {
      "patterns": [
        {
          "match": ":"
        }
      ]
    },
    "line_and_statement_should_end": {
      "patterns": [
        {
          "match": ":",
          "name": "support.token.delimiter.statement.atari.basic",
          "set": "dead_code"
        }
      ]
    },
    "dead_code": {
      "patterns": [
        {
          "match": ":",
          "name": "support.token.delimiter.statement.atari.basic"
        },
        {
          "match": "REM|(RE?)?\\.",
          "name": "keyword.rem.ataribasic.deadcode marked.dead",
          "set": "cmd_rem"
        }
      ]
    },
    "marked_dead": {
      "patterns": [
        {
          "meta_scope": "invalid.warning.dead-code.atari.basic"
        },
        {
          "include": "#code_line"
        }
      ]
    },
    "real_expr": {
      "patterns": [
        {
          "include": "#mixin_statement_end"
        },
        {
          "match": "",
          "push": "expr_eat_modifier"
        }
      ]
    },
    "expr_eat_modifier": {
      "patterns": [
        {
          "meta_content_scope": "ctx.expr_eat_modifier.atari.basic"
        },
        {
          "match": "[-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?)",
          "name": "constant.numeric.float.atari.basic",
          "set": "expr_wants_operator"
        },
        {
          "match": "(NOT)|(-)|(\\+)",
          "captures": {
            "1": {
              "name": "keyword.operator.logic.expr.modifiers.atari.basic"
            },
            "2": {
              "name": "keyword.operator.negative.atari.basic"
            },
            "3": {
              "name": "keyword.operator.positive.atari.basic"
            }
          },
          "set": "expr_2nd_modifier"
        }
      ]
    },
    "expr_2nd_modifier": {
      "patterns": [
        {
          "meta_content_scope": "ctx.expr_2nd_modifier.atari.basic"
        },
        {
          "match": "[-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?)",
          "name": "constant.numeric.float.atari.basic",
          "set": "expr_wants_operator"
        },
        {
          "match": "NOT|[-+]",
          "name": "invalid.illegal"
        }
      ]
    },
    "expr_wants_value": {
      "patterns": [
        {
          "meta_content_scope": "ctx.expr_wants_value.atari.basic"
        },
        {
          "match": "CHR\\$",
          "name": "meta.funct}ion-call.chrS.atari.basic",
          "set": [
            "expr_wants_operator",
            "required_args"
          ]
        },
        {
          "match": "STR\\$",
          "name": "meta.funct}ion-call.str.atari.basic",
          "set": [
            "expr_wants_operator",
            "required_args"
          ]
        },
        {
          "match": "(FRE)|(USR)|(ABS)|(ADR)|(ASC)|(ATN)|(CLOG)|(COS)|(EXP)|(INT)|(LEN)|(LOG)|(PEEK)|(RND)|(SGN)|(SIN)|(SQR)|(VAL)|(PADDLE)|(PTRIG)|(STICK)|(STRIG)",
          "captures": {
            "1": {
              "name": "meta.function-call.fre.atari.basic"
            },
            "2": {
              "name": "meta.function-call.usr.atari.basic"
            },
            "3": {
              "name": "meta.function-call.abs.atari.basic"
            },
            "4": {
              "name": "meta.function-call.adr.atari.basic"
            },
            "5": {
              "name": "meta.function-call.asc.atari.basic"
            },
            "6": {
              "name": "meta.function-call.atn.atari.basic"
            },
            "7": {
              "name": "meta.function-call.clog.atari.basic"
            },
            "8": {
              "name": "meta.function-call.cos.atari.basic"
            },
            "9": {
              "name": "meta.function-call.exp.atari.basic"
            },
            "10": {
              "name": "meta.function-call.int.atari.basic"
            },
            "11": {
              "name": "meta.function-call.len.atari.basic"
            },
            "12": {
              "name": "meta.function-call.log.atari.basic"
            },
            "13": {
              "name": "meta.function-call.peek.atari.basic"
            },
            "14": {
              "name": "meta.function-call.rnd.atari.basic"
            },
            "15": {
              "name": "meta.function-call.sgn.atari.basic"
            },
            "16": {
              "name": "meta.function-call.sin.atari.basic"
            },
            "17": {
              "name": "meta.function-call.sqr.atari.basic"
            },
            "18": {
              "name": "meta.function-call.val.atari.basic"
            },
            "19": {
              "name": "meta.function-call.paddle.atari.basic"
            },
            "20": {
              "name": "meta.function-call.ptrig.atari.basic"
            },
            "21": {
              "name": "meta.function-call.stick.atari.basic"
            },
            "22": {
              "name": "meta.function-call.strig.atari.basic"
            }
          },
          "set": [
            "expr_wants_operator",
            "required_args"
          ]
        },
        {
          "match": "\\(",
          "name": "support.paren.open.atari.basic",
          "set": "expr_till_close"
        },
        {
          "match": "\\\"",
          "name": "punctuation.definition.string.open.atari.basic",
          "set": "expr_eat_string"
        },
        {
          "match": "[-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?)",
          "name": "variable.float.exprwantsvalue.atari.basic",
          "set": "expr_wants_operator"
        },
        {
          "match": "THEN|GOTO|GOSUB",
          "name": "invalid.illegal"
        },
        {
          "match": "[A-Z][A-Z0-9]*\\$",
          "name": "variable.string.expr_wants.atari.basic",
          "set": "expr_eat_subscript"
        },
        {
          "match": "[A-Z][A-Z0-9]*",
          "name": "variable.float.exprwantsvalue2.atari.basic",
          "set": "expr_eat_subscript"
        }
      ]
    },
    "expr_wants_operator": {
      "patterns": [
        {
          "meta_content_scope": "ctx.expr_wants_operator.atari.basic"
        },
        {
          "match": "((<>|[<>]=|[-+*/^<=>]|AND|OR)\\s*(:|$))",
          "name": "invalid.illegal"
        },
        {
          "match": "[-+*/^]",
          "name": "keyword.operator.math.atari.basic",
          "set": "expr_eat_modifier"
        },
        {
          "match": "<>|[<>]=?|=|AND|OR",
          "name": "keyword.operator.logic.expr.wants.operator.atari.basic",
          "set": "expr_eat_modifier"
        },
        {
          "match": "(THEN)\\s*([-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?))",
          "captures": {
            "1": {
              "name": "keyword.then.atari.basic"
            },
            "2": {
              "name": "constant.numeric.line-number.atari.basic"
            }
          },
          "set": "line_and_statement_should_end"
        },
        {
          "match": "THEN",
          "name": "keyword.then.atari.basic",
          "set": "code_line"
        },
        {
          "match": "(GOTO)|(GOSUB)",
          "captures": {
            "1": {
              "name": "keyword.goto.atari.basic"
            },
            "2": {
              "name": "keyword.gosub.atari.basic"
            }
          }
        },
        {
          "match": "([A-Z][A-Z0-9]*)|([-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?))|\\(",
          "name": "invalid.illegal"
        },
        {
          "match": ""
        }
      ]
    },
    "expr_wants_comparison": {
      "patterns": [
        {
          "meta_content_scope": "ctx.expr_wants_comparison.atari.basic"
        },
        {
          "match": "(<>|[<>]=?|=)\\s*(:|$)",
          "name": "invalid.illegal"
        },
        {
          "match": "<>|[<>]=?|=",
          "name": "keyword.operator.logic.atari.basic",
          "set": "expr_eat_modifier"
        },
        {
          "match": "(THEN)\\s*([-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?))",
          "captures": {
            "1": {
              "name": "keyword.then.atari.basic"
            },
            "2": {
              "name": "constant.numeric.line-number.atari.basic"
            }
          },
          "set": "line_and_statement_should_end"
        },
        {
          "match": "THEN",
          "name": "keyword.then.atari.basic",
          "set": "code_line"
        },
        {
          "match": "(GOTO)|(GOSUB)",
          "captures": {
            "1": {
              "name": "keyword.goto.atari.basic"
            },
            "2": {
              "name": "keyword.gosub.atari.basic"
            }
          }
        },
        {
          "match": "([A-Z][A-Z0-9]*)|([-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?))|\\(",
          "name": "invalid.illegal"
        },
        {
          "match": ""
        }
      ]
    },
    "expr_eat_subscript": {
      "patterns": [
        {
          "meta_content_scope": "ctx.expr_eat_subscript.atari.basic"
        },
        {
          "match": "\\s*(\\()",
          "captures": {
            "1": {
              "name": "support.paren.open.subscript.atari.basic"
            }
          },
          "set": "expr_till_close"
        }
      ]
    },
    "expr_eat_string": {
      "patterns": [
        {
          "meta_scope": "string.quoted.atari.basic"
        },
        {
          "match": "$"
        },
        {
          "match": "[^\"]*(\")",
          "captures": {
            "1": {
              "name": "punctuation.definition.string.close.atari.basic"
            }
          },
          "set": "expr_wants_operator"
        }
      ]
    },
    "expr_till_close": {
      "patterns": [
        {
          "meta_content_scope": "ctx.expr_till_close.atari.basic"
        },
        {
          "match": "[^)]*(;:|$)",
          "name": "invalid.illegal"
        },
        {
          "include": "#mixin_statement_end"
        },
        {
          "match": "\\)",
          "name": "support.paren.close.subscript.atari.basic",
          "set": "expr_wants_operator"
        },
        {
          "match": "\\,",
          "name": "support.token.delimiter.subscripts.atari.basic"
        },
        {
          "match": "",
          "push": "expr_eat_modifier"
        }
      ]
    },
    "expr_wants_float": {
      "patterns": [
        {
          "meta_content_scope": "ctx.expr_wants_float.atari.basic"
        },
        {
          "match": "[A-Z][A-Z0-9]*\\$",
          "name": "invalid.illegal"
        },
        {
          "match": "[A-Z][A-Z0-9]*",
          "name": "variable.float.exprwantsfloat.atari.basic",
          "set": "expr_eat_subscript"
        },
        {
          "match": "[-+]?(\\d+\\.\\d*(E\\d+)?|\\.?\\d+(E\\d+)?)",
          "name": "constant.numeric.float.atari.basic",
          "set": "expr_wants_operator"
        }
      ]
    },
    "expr_wants_string": {
      "patterns": [
        {
          "match": "[A-Z][A-Z0-9]*\\$",
          "name": "variable.string.expr_wants_string.atari.basic",
          "set": "expr_wants_operator"
        },
        {
          "include": "#mixin_string"
        }
      ]
    },
    "mixin_containers": {
      "patterns": [
        {
          "include": "#mixin_string"
        },
        {
          "match": "\\(",
          "name": "support.paren.open.expr.atari.basic",
          "push": "expr_paren_open"
        },
        {
          "match": "\\)",
          "name": "support.paren.close.atari.basic"
        }
      ]
    },
    "mixin_some_exprs": {
      "patterns": [
        {
          "include": "#mixin_statement_end"
        },
        {
          "include": "#mixin_string"
        },
        {
          "match": "(<>|[<>]=?|=|AND|NOT|OR)",
          "name": "keyword.operator.logic.mixin.some.atari.basic"
        },
        {
          "include": "#mixin_values"
        },
        {
          "match": "\\(",
          "name": "support.paren.open.expr.atari.basic",
          "push": "expr_paren_open"
        },
        {
          "match": "\\)",
          "name": "invalid.illegal"
        },
        {
          "match": "[:$]",
          "name": "invalid.illegal"
        },
        {
          "match": "([-+*/^])",
          "name": "keyword.operator.math.atari.basic"
        }
      ]
    },
    "one_expr": {
      "patterns": [
        {
          "match": "\\s*([,;:]|$)",
          "name": "invalid.illegal"
        }
      ]
    },
    "two_exprs": {
      "patterns": [
        {
          "meta_content_scope": "ctx.two_exprs.atari.basic"
        },
        {
          "match": "\\s*:|$",
          "name": "invalid.illegal"
        },
        {
          "match": "\\s*(,)",
          "captures": {
            "1": {
              "name": "support.token.delimiter.list.1.atari.basic"
            }
          },
          "set": "one_expr"
        },
        {
          "include": "#real_expr"
        }
      ]
    },
    "three_exprs": {
      "patterns": [
        {
          "meta_content_scope": "ctx.three_exprs.atari.basic"
        },
        {
          "match": "\\s*:|$",
          "name": "invalid.illegal"
        },
        {
          "match": "\\s*(,)",
          "captures": {
            "1": {
              "name": "support.token.delimiter.list.2.atari.basic"
            }
          },
          "set": "two_exprs"
        },
        {
          "include": "#real_expr"
        }
      ]
    },
    "four_exprs": {
      "patterns": [
        {
          "meta_content_scope": "ctx.four_exprs.atari.basic"
        },
        {
          "match": "\\s*:|$",
          "name": "invalid.illegal"
        },
        {
          "match": "\\s*(,)",
          "captures": {
            "1": {
              "name": "support.token.delimiter.list.3.atari.basic"
            }
          },
          "set": "three_exprs"
        },
        {
          "include": "#real_expr"
        }
      ]
    },
    "mixin_statement_end": {
      "patterns": [
        {
          "match": ":\\s*$",
          "name": "invalid.illegal"
        },
        {
          "match": ":|$",
          "name": "support.token.delimiter.statement.atari.basic"
        }
      ]
    }
  }
}